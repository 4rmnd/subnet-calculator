import { useState } from 'react'
import { calculateNetworkId, calculateBroadcast, cidrToSubnetMask } from '../utils/ipUtils'

const VlsmCalculator = () => {
  const [networkAddress, setNetworkAddress] = useState('')
  const [networkCidr, setNetworkCidr] = useState('')
  const [subnets, setSubnets] = useState([{ name: '', hosts: '', cidr: '' }])
  const [results, setResults] = useState([])
  const [error, setError] = useState('')
  const [calculationMode, setCalculationMode] = useState('auto')
  const [remainingCidr, setRemainingCidr] = useState('')
  const [isSpinning, setIsSpinning] = useState(false)

  const addSubnet = () => {
    setSubnets([...subnets, { name: '', hosts: '', cidr: '' }])
  }

  const updateSubnet = (index, field, value) => {
    const newSubnets = [...subnets]
    newSubnets[index][field] = value
    setSubnets(newSubnets)
  }

  const removeSubnet = (index) => {
    if (subnets.length > 1) {
      setSubnets(subnets.filter((_, i) => i !== index))
    }
  }

  const calculateVlsm = () => {
    try {
      if (!networkAddress) throw new Error('Alamat network harus diisi')
      
      const networkParts = networkAddress.split('/')
      const baseNetwork = networkParts[0]
      const baseCidr = networkParts[1] || networkCidr

      let totalAvailableHosts = baseCidr ? Math.pow(2, 32 - parseInt(baseCidr)) - 2 : null
      let totalUsedHosts = 0
      let currentIp = baseNetwork
      
      if (calculationMode === 'auto') {
        const sortedSubnets = [...subnets]
          .filter(s => s.name && s.hosts)
          .map(s => ({
            ...s,
            hosts: parseInt(s.hosts)
          }))
          .sort((a, b) => b.hosts - a.hosts)

        if (sortedSubnets.length === 0) {
          throw new Error('Minimal satu subnet harus diisi')
        }

        const vlsmResults = []
        let remainingHosts = totalAvailableHosts

        // Hitung subnet yang diminta user
        for (const subnet of sortedSubnets) {
          const requiredBits = Math.ceil(Math.log2(subnet.hosts + 2))
          const cidr = 32 - requiredBits
          const subnetMask = cidrToSubnetMask(cidr)
          
          const networkId = calculateNetworkId(currentIp, subnetMask)
          const broadcast = calculateBroadcast(networkId, subnetMask)
          
          const firstHost = networkId.split('.')
          firstHost[3] = parseInt(firstHost[3]) + 1
          
          const lastHost = broadcast.split('.')
          lastHost[3] = parseInt(lastHost[3]) - 1

          const subnetHosts = Math.pow(2, requiredBits) - 2
          totalUsedHosts += subnetHosts
          remainingHosts = totalAvailableHosts - totalUsedHosts

          vlsmResults.push({
            name: subnet.name,
            networkId,
            broadcast,
            subnetMask,
            cidr,
            firstHost: firstHost.join('.'),
            lastHost: lastHost.join('.'),
            totalHosts: subnetHosts,
            remainingHosts,
            isAutoGenerated: false
          })

          // Set next network address
          const nextNetwork = broadcast.split('.')
          nextNetwork[3] = parseInt(nextNetwork[3]) + 1
          currentIp = nextNetwork.join('.')
        }

        // Tambahkan subnet untuk sisa host dengan CIDR yang diinput
        if (remainingHosts > 0 && baseCidr && remainingCidr) {
          const cidr = parseInt(remainingCidr)
          let remainingSpace = remainingHosts
          let subnetCounter = 1

          while (remainingSpace > 0) {
            const subnetMask = cidrToSubnetMask(cidr)
            const networkId = calculateNetworkId(currentIp, subnetMask)
            const broadcast = calculateBroadcast(networkId, subnetMask)
            
            const firstHost = networkId.split('.')
            firstHost[3] = parseInt(firstHost[3]) + 1
            
            const lastHost = broadcast.split('.')
            lastHost[3] = parseInt(lastHost[3]) - 1

            const subnetHosts = Math.pow(2, 32 - cidr) - 2
            remainingSpace -= subnetHosts
            
            vlsmResults.push({
              name: `Subnet Tersedia ${subnetCounter}`,
              networkId,
              broadcast,
              subnetMask,
              cidr,
              firstHost: firstHost.join('.'),
              lastHost: lastHost.join('.'),
              totalHosts: subnetHosts,
              remainingHosts: remainingSpace > 0 ? remainingSpace : 0,
              isAutoGenerated: true
            })

            // Set next network address
            const nextNetwork = broadcast.split('.')
            nextNetwork[3] = parseInt(nextNetwork[3]) + 1
            currentIp = nextNetwork.join('.')
            
            subnetCounter++
          }
        }

        setResults(vlsmResults)
      } else {
        const manualSubnets = [...subnets]
          .filter(s => s.name && s.cidr)
          .map(s => ({
            ...s,
            cidr: parseInt(s.cidr)
          }))

        if (manualSubnets.length === 0) {
          throw new Error('Minimal satu subnet harus diisi')
        }

        let currentIp = baseNetwork
        const vlsmResults = []

        for (const subnet of manualSubnets) {
          const cidr = subnet.cidr
          const subnetMask = cidrToSubnetMask(cidr)
          
          const networkId = calculateNetworkId(currentIp, subnetMask)
          const broadcast = calculateBroadcast(networkId, subnetMask)
          
          const firstHost = networkId.split('.')
          firstHost[3] = parseInt(firstHost[3]) + 1
          
          const lastHost = broadcast.split('.')
          lastHost[3] = parseInt(lastHost[3]) - 1

          vlsmResults.push({
            name: subnet.name,
            networkId,
            broadcast,
            subnetMask,
            cidr,
            firstHost: firstHost.join('.'),
            lastHost: lastHost.join('.'),
            totalHosts: Math.pow(2, 32 - cidr) - 2
          })

          // Set next network address
          const nextNetwork = broadcast.split('.')
          nextNetwork[3] = parseInt(nextNetwork[3]) + 1
          currentIp = nextNetwork.join('.')
        }

        setResults(vlsmResults.map(result => {
          totalUsedHosts += result.totalHosts
          return {
            ...result,
            remainingHosts: totalAvailableHosts ? totalAvailableHosts - totalUsedHosts : null
          }
        }))
      }
      
      setError('')
    } catch (err) {
      setError(err.message)
      setResults([])
    }
  }

  const copyTableToClipboard = () => {
    if (results.length === 0) return

    // Format header
    const headers = ['Subnet', 'Network ID', 'Subnet Mask', 'CIDR', 'First Host', 'Last Host', 'Broadcast', 'Total Hosts']
    
    // Format data rows
    const rows = results.map(result => [
      result.name,
      result.networkId,
      result.subnetMask,
      `/${result.cidr}`,
      result.firstHost,
      result.lastHost,
      result.broadcast,
      result.totalHosts
    ])

    // Combine headers and rows
    const tableData = [headers, ...rows]
    
    // Convert to tab-separated string
    const tableText = tableData
      .map(row => row.join('\t'))
      .join('\n')

    // Copy to clipboard
    navigator.clipboard.writeText(tableText)
      .then(() => {
        // Show tooltip
        const tooltip = document.getElementById('copyTooltip')
        tooltip.classList.remove('opacity-0')
        tooltip.classList.add('opacity-100')
        
        // Hide tooltip after 2 seconds
        setTimeout(() => {
          tooltip.classList.remove('opacity-100')
          tooltip.classList.add('opacity-0')
        }, 2000)
      })
      .catch(err => console.error('Gagal menyalin:', err))
  }

  const resetCalculator = () => {
    setIsSpinning(true)
    setTimeout(() => {
      setNetworkAddress('')
      setNetworkCidr('')
      setSubnets([{ name: '', hosts: '', cidr: '' }])
      setResults([])
      setError('')
      setIsSpinning(false)
    }, 800)
  }

  return (
    <div className="max-w-4xl mx-auto space-y-8 p-8 bg-gradient-to-br from-black via-gray-900 to-black rounded-2xl card-gradient-border animate-fadeIn">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-extrabold text-white drop-shadow-[0_0_8px_#D9D9D9] tracking-wide">VLSM Calculator</h2>
        <button
          onClick={resetCalculator}
          className={`p-2 rounded-full bg-white/10 hover:bg-white/20 transition-all shadow-[0_0_8px_#D9D9D9] btn-reset-spin ${isSpinning ? 'btn-reset-spin-active' : ''}`}
          title="Reset calculator"
        >
          <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
        </button>
      </div>
      <div className="space-y-8">
        <div className="bg-[#18181b] bg-opacity-80 rounded-xl p-6 card-gradient-border animate-fadeIn">
          <label className="block text-sm font-semibold text-[#D9D9D9] mb-2">Network Address</label>
          <div className="flex flex-col sm:flex-row gap-3">
          <input
            type="text"
            value={networkAddress}
            onChange={(e) => setNetworkAddress(e.target.value)}
            placeholder="Contoh: 192.168.1.0"
              className="input-field bg-black/60 border border-[#D9D9D9] text-white font-mono focus:ring-2 focus:ring-[#D9D9D9] transition-all"
          />
            <input
              type="number"
              value={networkCidr}
              onChange={(e) => setNetworkCidr(e.target.value)}
              placeholder="CIDR"
              className="input-field bg-black/60 border border-[#D9D9D9] text-white font-mono w-24 focus:ring-2 focus:ring-[#D9D9D9] transition-all"
              min="1"
              max="32"
            />
          </div>
          <p className="text-sm text-[#D9D9D9] mt-1">Format: IP Address (wajib) dan CIDR (opsional)</p>
        </div>
        <div className="bg-[#18181b] bg-opacity-80 rounded-xl p-6 card-gradient-border animate-fadeIn space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-white drop-shadow-[0_0_8px_#D9D9D9]">Daftar Subnet</h3>
            <div className="flex space-x-4">
              <button 
                onClick={() => setCalculationMode('auto')}
                className={`btn ${calculationMode === 'auto' ? 'bg-white text-black font-bold shadow-[0_0_8px_#D9D9D9]' : 'bg-black/30 text-white'} border border-[#D9D9D9] rounded-md px-4 py-2 transition-all`}
              >
                Mode Auto
              </button>
              <button 
                onClick={() => setCalculationMode('manual')}
                className={`btn ${calculationMode === 'manual' ? 'bg-white text-black font-bold shadow-[0_0_8px_#D9D9D9]' : 'bg-black/30 text-white'} border border-[#D9D9D9] rounded-md px-4 py-2 transition-all`}
              >
                Mode CIDR Manual
              </button>
            </div>
          </div>
          {subnets.map((subnet, index) => (
            <div key={index} className="flex items-center space-x-2">
              <input
                type="text"
                value={subnet.name}
                onChange={(e) => updateSubnet(index, 'name', e.target.value)}
                placeholder="Nama Subnet"
                className="input-field bg-black/60 border border-[#D9D9D9] text-white font-mono focus:ring-2 focus:ring-[#D9D9D9] transition-all"
              />
              {calculationMode === 'auto' ? (
                <input
                  type="number"
                  value={subnet.hosts}
                  onChange={(e) => updateSubnet(index, 'hosts', e.target.value)}
                  placeholder="Jumlah Host"
                  className="input-field bg-black/60 border border-[#D9D9D9] text-white font-mono focus:ring-2 focus:ring-[#D9D9D9] transition-all"
                  min="1"
                />
              ) : (
                <input
                  type="number"
                  value={subnet.cidr}
                  onChange={(e) => updateSubnet(index, 'cidr', e.target.value)}
                  placeholder="CIDR (contoh: 24)"
                  className="input-field bg-black/60 border border-[#D9D9D9] text-white font-mono focus:ring-2 focus:ring-[#D9D9D9] transition-all"
                  min="1"
                  max="32"
                />
              )}
              <button
                onClick={() => removeSubnet(index)}
                className="p-2 text-red-400 hover:bg-red-900/30 rounded-lg transition-all"
              >
                ✕
              </button>
            </div>
          ))}
          <button 
            onClick={addSubnet}
            className="btn bg-gradient-to-r from-[#D9D9D9] to-white text-black font-bold shadow-[0_0_8px_#D9D9D9] hover:scale-105 transition-transform"
          >
            + Tambah Subnet
          </button>
        </div>
        <button onClick={calculateVlsm} className="btn bg-gradient-to-r from-[#D9D9D9] to-white text-black font-bold shadow-[0_0_8px_#D9D9D9] hover:scale-105 transition-transform w-full">
          Hitung VLSM
        </button>
        {error && (
          <div className="bg-red-900/40 text-red-300 p-4 rounded-lg text-sm shadow-[0_0_8px_#D9D9D9] animate-fadeIn">
            {error}
          </div>
        )}
        {results.length > 0 && results.some(r => !r.isAutoGenerated) && (
          <div className="bg-[#18181b] bg-opacity-80 rounded-xl p-6 card-gradient-border animate-fadeIn space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Pengaturan Subnet Tersedia
              </h3>
              <div className="flex items-center space-x-2">
                <label className="text-sm text-gray-600 dark:text-gray-400">
                  CIDR untuk subnet tersedia:
                </label>
                <input
                  type="number"
                  value={remainingCidr}
                  onChange={(e) => setRemainingCidr(e.target.value)}
                  placeholder="Contoh: 30"
                  className="input-field w-24 bg-black/60 border border-[#D9D9D9] text-white font-mono focus:ring-2 focus:ring-[#D9D9D9] transition-all"
                  min="1"
                  max="32"
                />
                <button 
                  onClick={calculateVlsm}
                  className="btn bg-gradient-to-r from-[#D9D9D9] to-white text-black font-bold shadow-[0_0_8px_#D9D9D9] rounded-md hover:scale-105 transition-transform px-4 py-2 ml-2 disabled:opacity-60 disabled:cursor-not-allowed"
                  disabled={!remainingCidr}
                >
                  Terapkan
                </button>
              </div>
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Masukkan nilai CIDR untuk membagi sisa host menjadi subnet-subnet yang sama
            </p>
          </div>
        )}
        {results.length > 0 && (
          <div className="bg-[#18181b] bg-opacity-80 rounded-xl p-6 card-gradient-border animate-fadeIn overflow-x-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                Hasil Perhitungan VLSM
              </h3>
              <button
                id="copyButton"
                onClick={copyTableToClipboard}
                className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 
                         transition-colors duration-200 group relative"
                title="Salin ke clipboard"
              >
                {/* Copy Icon */}
                <svg 
                  className="w-5 h-5 text-gray-600 dark:text-gray-400 
                           group-hover:text-gray-900 dark:group-hover:text-white
                           transition-colors duration-200"
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" 
                  />
                </svg>

                {/* Success Tooltip */}
                <span 
                  id="copyTooltip"
                  className="absolute -top-8 left-1/2 transform -translate-x-1/2
                           bg-gray-900 dark:bg-gray-700 text-white px-2 py-1 
                           rounded text-xs opacity-0 transition-opacity duration-200"
                >
                  Tersalin!
                </span>
              </button>
            </div>

            <div className="overflow-x-auto rounded-xl">
              <table className="min-w-full divide-y divide-[#2a2a2a] bg-[#18181b]/80">
                <thead className="rounded-t-xl bg-black/60">
                  <tr>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">No</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">Subnet</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">Network ID</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">Subnet Mask</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">CIDR</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">First Host</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">Last Host</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">Broadcast</th>
                    <th className="px-4 py-2 text-left text-sm font-medium text-[#D9D9D9]">Total Hosts</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-[#2a2a2a] rounded-b-xl bg-black/30 text-[#D9D9D9]">
                  {results.map((result, index) => (
                    <tr 
                      key={index} 
                      className={`hover:bg-white/10 transition-colors`}
                    >
                      <td className="px-4 py-2 text-sm">{index + 1}</td>
                      <td className="px-4 py-2 text-sm">{result.name}</td>
                      <td className="px-4 py-2 text-sm font-mono">{result.networkId}</td>
                      <td className="px-4 py-2 text-sm font-mono">{result.subnetMask}</td>
                      <td className="px-4 py-2 text-sm font-mono">/{result.cidr}</td>
                      <td className="px-4 py-2 text-sm font-mono">{result.firstHost}</td>
                      <td className="px-4 py-2 text-sm font-mono">{result.lastHost}</td>
                      <td className="px-4 py-2 text-sm font-mono">{result.broadcast}</td>
                      <td className="px-4 py-2 text-sm font-mono">{result.totalHosts}</td>
                    </tr>
                  ))}
                </tbody>
                <tfoot className="bg-black/60 border-t-2 border-[#2a2a2a] text-[#D9D9D9]">
                  <tr>
                    <td colSpan="8" className="px-4 py-2 text-sm font-medium">Total Host Terpakai</td>
                    <td className="px-4 py-2 text-sm font-mono">{results.reduce((sum, result) => sum + result.totalHosts, 0)}</td>
                  </tr>
                  <tr>
                    <td colSpan="8" className="px-4 py-2 text-sm font-medium">Sisa Host</td>
                    <td className="px-4 py-2 text-sm font-mono">{results[results.length - 1]?.remainingHosts || 0}</td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default VlsmCalculator 